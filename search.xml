<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[UE4之表单提交]]></title>
    <url>%2F2018%2F07%2F28%2FWWWFrom%2F</url>
    <content type="text"><![CDATA[ue4 form 填坑！ 折腾了很久 12345678910111213141516171819202122232425262728293031323334353637383940414243444546FString CWWWForm::StartBoundary()&#123; return FString::Printf(TEXT("\r\n--%s\r\n"), *mBoundary);&#125;FString CWWWForm::EndBoundary()&#123; return FString::Printf(TEXT("\r\n--%s--\r\n"), *mBoundary);&#125;void CWWWForm::AddField(FString fieldName, FString value)&#123; FString disposition = FString::Printf(TEXT("Content-Disposition: form-data;name=\"%s\"\r\n"), *fieldName); mDatas.Append((uint8*)TCHAR_TO_UTF8(*StartBoundary()), StartBoundary().Len()); mDatas.Append((uint8*)TCHAR_TO_UTF8(*disposition), disposition.Len()); mDatas.Append((uint8*)TCHAR_TO_UTF8(*mTextType), mTextType.Len()); mDatas.Append((uint8*)TCHAR_TO_UTF8(*value), value.Len());&#125;void CWWWForm::AddField(FString fieldName, int32 value)&#123; AddField(fieldName, FString::FromInt(value));&#125;void CWWWForm::AddField(FString fieldName, float value)&#123; AddField(fieldName, FString::SanitizeFloat(value));&#125;void CWWWForm::AddBinaryData(FString fieldName, TArray&lt;uint8&gt; conents, FString fileName, FString mimeType)&#123; FString disposition = FString::Printf(TEXT("Content-Disposition: form-data; name=\"%s\"; fileName=\"%s\"\r\n"), *fieldName, *fileName); mimeType = FString::Printf(TEXT("Content-Type: %s\r\n\r\n"), *mimeType); mDatas.Append((uint8*)TCHAR_TO_UTF8(*StartBoundary()), StartBoundary().Len()); mDatas.Append((uint8*)TCHAR_TO_UTF8(*disposition), disposition.Len()); mDatas.Append((uint8*)TCHAR_TO_UTF8(*mimeType), mimeType.Len()); mDatas.Append(conents);&#125;TArray&lt;uint8&gt; CWWWForm::GetDatas()&#123; mDatas.Append((uint8*)TCHAR_TO_UTF8(*EndBoundary()), EndBoundary().Len()); return mDatas;&#125;FString CWWWForm::GetBoundary()&#123; return mBoundary;&#125; 网络请求： 1234567891011121314151617181920void Post(const FString&amp; url, CWWWForm form)&#123; if (url.IsEmpty()) &#123; return; &#125; TSharedRef&lt;IHttpRequest&gt; HttpRequest = FHttpModule::Get().CreateRequest(); HttpRequest-&gt;SetURL(url); HttpRequest-&gt;SetVerb(TEXT("POST")); FString header = FString::Printf(TEXT("multipart/form-data; boundary=%s"), *(form.GetBoundary())); HttpRequest-&gt;SetHeader("Content-Type", header); HttpRequest-&gt;SetHeader("Cache-Control", "no-cache"); HttpRequest-&gt;SetContent(form.GetDatas()); HttpRequest-&gt;OnProcessRequestComplete().BindLambda([=](FHttpRequestPtr _HttpRequest, FHttpResponsePtr _HttpResponse, bool _bSucceeded) &#123; &#125;); HttpRequest-&gt;ProcessRequest();&#125; Example: 123456CWWWForm form;form.AddBinaryData("file", fileData, fileName);form.AddField("test", test);------Post(url, form); 中文需要转码 1FPlatformHttp::UrlEncode]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>UE4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UE4之ZIP解压缩]]></title>
    <url>%2F2018%2F07%2F28%2FZip%2F</url>
    <content type="text"><![CDATA[[转载]https://blog.csdn.net/wangshubo1989/article/details/52847891 用在ue4上，必须得创建插件，不然会引起冲突 引用头文件 1234#include "AllowWindowsPlatformTypes.h" #include "zip.h"#include "unzip.h"#include "HideWindowsPlatformTypes.h" 压缩 12345678910bool Zip(FString fileName, TMap&lt;FString, FString&gt; files)&#123; HZIP hz = CreateZip(*fileName, 0); for (auto file : files) &#123; ZipAdd(hz, *file.Key, *file.Value); &#125; CloseZip(hz); return true;&#125; 解压 1234567891011121314151617181920bool UnZip(FString fileName, TArray&lt;FString&gt;&amp; files)&#123; TCHAR buffer[MAX_PATH] = &#123; 0 &#125;; GetCurrentDirectoryW(MAX_PATH, buffer); FString folder = FPaths::GetPath(fileName); SetCurrentDirectoryW(*folder); HZIP hz = OpenZip(*fileName, 0); ZIPENTRY ze; GetZipItem(hz, -1, &amp;ze); int numitems = ze.index; for (int i = 0; i &lt; numitems; i++) &#123; GetZipItem(hz, i, &amp;ze); UnzipItem(hz, i, ze.name); files.Add(ze.name); &#125; CloseZip(hz); SetCurrentDirectoryW(buffer); return true;&#125;]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>UE4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UE4之截图三种方法]]></title>
    <url>%2F2018%2F07%2F27%2FHighResScreenshot%2F</url>
    <content type="text"><![CDATA[方法一 12345678void TakePhoto(FString fileName, int32 width, int32 height, bool bUseHighResScreenshot)&#123; GIsHighResScreenshot = bUseHighResScreenshot; //是否高清 GScreenshotResolutionX = width; GScreenshotResolutionY = height; FScreenshotRequest::RequestScreenshot(fileName, false, true); FString fileNameNextScreenshot = FScreenshotRequest::GetFilename();&#125; 方法二--命令行 1mPC-&gt;ConsoleCommand("shot", true); 方法三--ASceneCapture2D（相机截图） 首先分别创建 12345678910111213141516void ScreenShot(FString texturePath)&#123; FString path = FString::Printf(TEXT("Blueprint'/Game/SceneCapture.SceneCapture_C'")); ASceneCapture2D* sceneCapture = (ASceneCapture2D*)LoadObj(path); USceneCaptureComponent2D* captureComp = sceneCapture-&gt;GetCaptureComponent2D(); sceneCapture-&gt;GetCaptureComponent2D()-&gt;TextureTarget-&gt;InitAutoFormat(256,256); //设置大小 sceneCapture-&gt;GetCaptureComponent2D()-&gt;UpdateContent(); auto lambda = [=]() &#123; SaveRenderTargetToDisk(sceneCapture-&gt;GetCaptureComponent2D()-&gt;TextureTarget, texturePath); sceneCapture-&gt;Destroy(); &#125;; FTimerHandle screenshotTimer; GetWorld()-&gt;GetTimerManager().SetTimer(screenshotTimer, lambda, 0.0001f, false, 0);&#125; 123456789101112131415AActor* LoadObj(FString path)&#123; AActor* spawnActor = nullptr; UObject* loadObj = LoadObject&lt;UObject&gt;(nullptr, *path); if (loadObj != NULL) &#123; UBlueprintGeneratedClass* ubp = Cast&lt;UBlueprintGeneratedClass&gt;(loadObj); if (ubp != NULL) &#123; spawnActor = GEngine-&gt;GameViewport-&gt;GetWorld()-&gt;SpawnActor&lt;AActor&gt;(ubp); &#125; &#125; return spawnActor;&#125; 把图片保存到本地 1234567891011121314151617181920212223void SaveRenderTargetToDisk(UTextureRenderTarget2D* inRenderTarget, FString filePath)&#123; FTextureRenderTargetResource* RTResource = inRenderTarget-&gt;GameThread_GetRenderTargetResource(); FReadSurfaceDataFlags ReadPixelFlags(RCM_UNorm); ReadPixelFlags.SetLinearToGamma(true); TArray&lt;FColor&gt; OutBMP; RTResource-&gt;ReadPixels(OutBMP, ReadPixelFlags); for (FColor&amp; color : OutBMP) &#123; color.A = 255; &#125; FIntRect SourceRect; FIntPoint DestSize(inRenderTarget-&gt;GetSurfaceWidth(), inRenderTarget-&gt;GetSurfaceHeight()); FString ResultPath; FHighResScreenshotConfig&amp; HighResScreenshotConfig = GetHighResScreenshotConfig(); HighResScreenshotConfig.SaveImage(filePath, OutBMP, DestSize, &amp;ResultPath);&#125;]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>UE4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UE4之c++调用蓝图变量]]></title>
    <url>%2F2018%2F07%2F27%2FC%2B%2BCallBlueprintProperty%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819template&lt;class T&gt; static const void* CallBlueprintProperty(const AActor* otherActor, const FName propertyName) &#123; const void* outValue = nullptr; UClass* myClass = otherActor-&gt;GetClass(); for (UProperty* Property = myClass-&gt;PropertyLink; Property; Property = Property-&gt;PropertyLinkNext) &#123; T* inProperty = Cast&lt;T&gt;(Property); if (inProperty &amp;&amp; Property-&gt;GetFName() == propertyName) &#123; outValue = &amp;inProperty-&gt;GetPropertyValue(Property-&gt;ContainerPtrToValuePtr&lt;void&gt;(otherActor)); break; &#125; &#125; return outValue; &#125; 例子： 1float test = *(float*)CallBlueprintProperty&lt;UFloatProperty&gt;(AActor*, FName("test"));]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>UE4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UE4之获取文件Md5]]></title>
    <url>%2F2018%2F07%2F27%2FGetFileMd5%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728FString GetFileMD5(FString filePath)&#123; if (ExistsFile(filePath)) &#123; FString content; FFileHelper::LoadFileToString(content, *filePath); TArray&lt;uint8&gt; outArray; if (FFileHelper::LoadFileToArray(outArray, *filePath)) &#123; return GetMd5Str(outArray); &#125; &#125; return "";&#125;FString GetMd5Str(TArray&lt;uint8&gt; inArray) &#123; FMD5 md5Maker; md5Maker.Update(inArray.GetData(), inArray.Num()); uint8 digest[16]; md5Maker.Final(digest); FString mD5Str; for (int32 i = 0; i &lt; 16; i++) &#123; mD5Str += FString::Printf(TEXT("%02x"), digest[i]); &#125; mD5Str = mD5Str.ToUpper(); return mD5Str;&#125;]]></content>
      <categories>
        <category>UE4</category>
      </categories>
      <tags>
        <tag>UE4</tag>
      </tags>
  </entry>
</search>
